"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message

from database.db import get_session
from database.crud import get_user_queries, get_popular_categories
from database.models import User
from utils.logger import setup_logger

logger = setup_logger()
router = Router()


@router.message(Command("stats"))
@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        queries = await get_user_queries(session, db_user.id, limit=100)
    
    if not queries:
        await message.answer(
            "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!"
        )
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã
    total_queries = len(queries)
    avg_response_time = sum(q.response_time or 0 for q in queries) / total_queries if queries else 0
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {}
    for q in queries:
        if q.category:
            categories[q.category] = categories.get(q.category, 0) + 1
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    recent_queries = queries[:5]
    
    stats_text = f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
    stats_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {db_user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
    stats_text += f"üÜî ID: {db_user.id}\n"
    stats_text += f"üìù –†–æ–ª—å: {db_user.role.value}\n\n"
    stats_text += f"‚ùì –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}\n"
    stats_text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {avg_response_time:.2f} —Å–µ–∫\n"
    stats_text += f"üìÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {db_user.created_at.strftime('%d.%m.%Y')}\n\n"
    
    if categories:
        stats_text += "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        sorted_categories = sorted(categories.items(), key=lambda x: x[1], reverse=True)
        for category, count in sorted_categories[:5]:
            stats_text += f"  ‚Ä¢ {category}: {count}\n"
        stats_text += "\n"
    
    if recent_queries:
        stats_text += "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
        for i, q in enumerate(recent_queries, 1):
            question_short = q.question[:50] + "..." if len(q.question) > 50 else q.question
            stats_text += f"{i}. {question_short}\n"
    
    await message.answer(stats_text, parse_mode="HTML")

