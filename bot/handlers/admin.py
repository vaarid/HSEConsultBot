"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""
from datetime import datetime
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from bot.keyboards.main_menu import get_admin_keyboard, get_ai_provider_keyboard
from database.db import get_session
from database.crud import get_all_users, get_queries_stats, get_popular_categories, set_setting, get_setting
from database.models import User, UserRole
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()
router = Router()


def is_admin(user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user.role == UserRole.ADMIN


@router.message(Command("admin"))
@router.message(F.text == "üë§ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def cmd_admin(message: Message, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üë§ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    async with get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        users = await get_all_users(session)
        stats = await get_queries_stats(session)
        categories = await get_popular_categories(session, limit=5)
    
    stats_text = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
    stats_text += f"‚ùì –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_queries']}\n"
    stats_text += f"‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {stats['avg_response_time']} —Å–µ–∫\n\n"
    
    if categories:
        stats_text += "<b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>\n"
        for category, count in categories:
            stats_text += f"  ‚Ä¢ {category}: {count}\n"
    
    await callback.message.edit_text(
        stats_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def admin_users(callback: CallbackQuery, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    async with get_session() as session:
        users = await get_all_users(session)
    
    users_text = "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–æ–ª—è–º
    by_role = {}
    for user in users:
        role = user.role.value
        if role not in by_role:
            by_role[role] = []
        by_role[role].append(user)
    
    for role, role_users in by_role.items():
        users_text += f"<b>{role}:</b> {len(role_users)} —á–µ–ª.\n"
    
    users_text += f"\n<b>–í—Å–µ–≥–æ:</b> {len(users)}"
    
    await callback.message.edit_text(
        users_text,
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_ai")
async def admin_ai(callback: CallbackQuery, db_user: User):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    config = load_config()
    current_provider = config.app.ai_provider
    
    await callback.message.edit_text(
        f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: <b>{current_provider}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:",
        reply_markup=get_ai_provider_keyboard(current_provider),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("ai_provider_"))
async def change_ai_provider(callback: CallbackQuery, db_user: User):
    """
    –ò–∑–º–µ–Ω–∏—Ç—å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    provider = callback.data.split("_")[-1]  # openai –∏–ª–∏ gigachat
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    async with get_session() as session:
        await set_setting(
            session,
            key="ai_provider",
            value=provider,
            description="–¢–µ–∫—É—â–∏–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä"
        )
    
    logger.info(f"AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {provider} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {db_user.id}")
    
    await callback.answer(f"‚úÖ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {provider}", show_alert=True)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        f"ü§ñ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ AI</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: <b>{provider}</b>\n\n"
        f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!",
        reply_markup=get_ai_provider_keyboard(provider),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "admin_kb")
async def admin_kb(callback: CallbackQuery, db_user: User):
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üìö <b>–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π</b>\n\n"
        "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...\n"
        "–ó–¥–µ—Å—å –±—É–¥–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π.",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def admin_back(callback: CallbackQuery, db_user: User):
    """
    –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
    
    Args:
        callback: Callback query
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë§ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(Command("rate_limits"))
async def cmd_rate_limits(message: Message, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ rate limits (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    limits_info = "‚è± <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Rate Limits:</b>\n\n"
    
    for limit_type, limit in rate_limiter.limits.items():
        limits_info += f"<b>{limit.name}</b>\n"
        limits_info += f"‚îú –¢–∏–ø: <code>{limit_type}</code>\n"
        limits_info += f"‚îú –õ–∏–º–∏—Ç: {limit.max_requests} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        limits_info += f"‚îî –û–∫–Ω–æ: {limit.window_seconds // 60} –º–∏–Ω ({limit.window_seconds} —Å–µ–∫)\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    total_users = len(rate_limiter.request_history)
    limits_info += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    limits_info += f"‚îî –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n\n"
    
    limits_info += "üí° <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    limits_info += "‚Ä¢ <code>/clear_rate_limit USER_ID</code> - –æ—á–∏—Å—Ç–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
    limits_info += "‚Ä¢ <code>/user_rate_limit USER_ID</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    
    await message.answer(limits_info, parse_mode="HTML")


@router.message(Command("clear_rate_limit"))
async def cmd_clear_rate_limit(message: Message, db_user: User):
    """
    –û—á–∏—Å—Ç–∏—Ç—å rate limits –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º USER_ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID:\n"
            "<code>/clear_rate_limit USER_ID</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USER_ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    rate_limiter.clear_user_history(target_user_id)
    
    await message.answer(
        f"‚úÖ Rate limits –æ—á–∏—â–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{target_user_id}</code>",
        parse_mode="HTML"
    )


@router.message(Command("user_rate_limit"))
async def cmd_user_rate_limit(message: Message, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limits –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if not is_admin(db_user):
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º USER_ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    parts = message.text.split()
    if len(parts) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ USER_ID:\n"
            "<code>/user_rate_limit USER_ID</code>",
            parse_mode="HTML"
        )
        return
    
    try:
        target_user_id = int(parts[1])
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç USER_ID. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return
    
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    
    if target_user_id not in rate_limiter.request_history:
        await message.answer(
            f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_user_id}</code> –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats_text = f"üìä <b>Rate Limit —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}:</b>\n\n"
    
    user_history = rate_limiter.request_history[target_user_id]
    
    for limit_type, limit in rate_limiter.limits.items():
        if limit_type in user_history and user_history[limit_type]:
            used = len([ts for ts in user_history[limit_type] 
                       if (datetime.now() - ts).total_seconds() < limit.window_seconds])
            remaining = rate_limiter.get_remaining_requests(target_user_id, limit_type)
            
            stats_text += f"<b>{limit.name}</b>\n"
            stats_text += f"‚îú –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used}/{limit.max_requests}\n"
            stats_text += f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: {remaining}\n\n"
    
    await message.answer(stats_text, parse_mode="HTML")
