"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI Assistant API (–Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
"""
import time
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.states.conversation import ConversationStates
from database.db import get_session
from database.crud import (
    create_message, increment_user_requests,
    create_query, create_audit_log, set_user_thread_id, get_setting,
    get_user_messages
)
from database.models import User, AIProvider
from ai.assistant_client import OpenAIAssistantClient
from services.knowledge_base import get_knowledge_base
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()
router = Router()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
assistant_client: OpenAIAssistantClient = None


async def get_assistant_client() -> OpenAIAssistantClient:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    Returns:
        OpenAIAssistantClient: –ö–ª–∏–µ–Ω—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    """
    global assistant_client
    
    if assistant_client is None:
        config = load_config()
        assistant_client = OpenAIAssistantClient(config.openai)
        
        # –ü–æ–ª—É—á–∞–µ–º ID –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
        async with get_session() as session:
            assistant_id = await get_setting(session, "openai_assistant_id")
        
        if assistant_id:
            await assistant_client.get_or_create_assistant(assistant_id)
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            new_assistant_id = await assistant_client.create_assistant()
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
            async with get_session() as session:
                from database.crud import set_setting
                await set_setting(
                    session,
                    key="openai_assistant_id",
                    value=new_assistant_id,
                    description="OpenAI Assistant ID"
                )
    
    return assistant_client


@router.message(Command("ask_assistant"))
async def cmd_ask_assistant(message: Message, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask_assistant - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await message.answer(
        "ü§ñ <b>–†–µ–∂–∏–º –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞</b>\n\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞. –Ø –∏—Å–ø–æ–ª—å–∑—É—é OpenAI Assistant API "
        "—Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.\n\n"
        "–í–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (thread), "
        "—á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–Ω–µ –ø–æ–º–Ω–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.",
        parse_mode="HTML"
    )
    await state.set_state(ConversationStates.waiting_for_question)


@router.message(lambda message: message.text and message.text.startswith('?'))
async def process_assistant_question(message: Message, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (–≤–æ–ø—Ä–æ—Å—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '?')
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    allowed, error_message = rate_limiter.check_rate_limit(db_user.id, "assistant_question")
    
    if not allowed:
        await message.answer(error_message, parse_mode="HTML")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    rate_limiter.record_request(db_user.id, "assistant_question")
    
    question = message.text[1:].strip()  # –£–±–∏—Ä–∞–µ–º '?' –≤ –Ω–∞—á–∞–ª–µ
    
    if not question or len(question) < 5:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º
    from utils.privacy import anonymize_personal_data, should_warn_about_personal_data, get_privacy_warning
    
    anonymized_question, has_personal_data = anonymize_personal_data(question, log_detection=True)
    
    # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ü–î, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if has_personal_data:
        await message.answer(get_privacy_warning(), parse_mode="HTML")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.id} —É–∫–∞–∑–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–æ–ø—Ä–æ—Å–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É. –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è.")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    question_for_processing = anonymized_question if has_personal_data else question
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await message.answer("üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –∏ –æ–±—Ä–∞—â–∞—é—Å—å –∫ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É...")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ FAQ
        async with get_session() as session:
            history = await get_user_messages(session, db_user.id, limit=3)
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ FAQ
        context_query = question
        if history:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            recent_context = []
            for msg in history[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                if msg.role == "user":
                    recent_context.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {msg.content}")
                elif msg.role == "assistant":
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    answer_preview = msg.content[:100] + "..." if len(msg.content) > 100 else msg.content
                    recent_context.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç: {answer_preview}")
            
            if recent_context:
                context_query = f"{' '.join(recent_context)} –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"
                logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è FAQ: {context_query}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π FAQ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        kb = get_knowledge_base()
        faq_answer = await kb.get_answer_with_validation(context_query, check_urls=True)
        
        if faq_answer and faq_answer['similarity_score'] >= 0.5:
            # –ù–∞—à–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ FAQ
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ FAQ: {faq_answer['question']} ({faq_answer['similarity_score']:.2%})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ FAQ
            faq_formatted = kb.format_answer_for_user(faq_answer)
            
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏
            question_hash = hash(question) % 1000000
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                    callback_data=f"expand_assistant:{db_user.id}:{question_hash}"
                )],
                [
                    InlineKeyboardButton(
                        text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                        callback_data=f"rate_assistant_helpful:{question_hash}"
                    ),
                    InlineKeyboardButton(
                        text="üëé –ù–µ —Ç–æ",
                        callback_data=f"rate_assistant_unhelpful:{question_hash}"
                    )
                ]
            ])
            
            await message.answer(faq_formatted, parse_mode="HTML", reply_markup=keyboard)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç FAQ –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(
                last_question=question,
                question_for_ai=question_for_processing,  # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è AI
                question_hash=question_hash,
                faq_context={
                    'question': faq_answer['question'],
                    'answer': faq_answer['answer'],
                    'legal_reference': faq_answer['legal_reference'],
                    'legal_url': faq_answer['legal_url'],
                    'similarity_score': faq_answer['similarity_score']
                }
            )
            
            logger.info(f"–û—Ç–≤–µ—Ç –∏–∑ FAQ –ø–æ–∫–∞–∑–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞")
            return
        
        # 4. –û—Ç–≤–µ—Ç –≤ FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å—Ä–∞–∑—É –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        client = await get_assistant_client()
        
        # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è thread
        thread_id = db_user.assistant_thread_id
        
        # 6. –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        response = await client.ask_assistant(
            question=question_for_processing,
            thread_id=thread_id
        )
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        if not thread_id:
            async with get_session() as session:
                await set_user_thread_id(session, db_user.id, response["thread_id"])
        
        answer = response["content"]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await create_message(session, db_user.id, "user", question)
            await create_message(session, db_user.id, "assistant", answer)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            await increment_user_requests(session, db_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await create_query(
                session,
                user_id=db_user.id,
                question=question,
                answer=answer,
                ai_provider=AIProvider.OPENAI,
                ai_model=response["model"],
                response_time=response_time,
                tokens_used=response.get("tokens_used"),
                category="assistant_query"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="assistant_question_asked",
                details={
                    "assistant_id": response["assistant_id"],
                    "thread_id": response["thread_id"],
                    "response_time": response_time,
                    "tokens": response.get("tokens_used")
                }
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        question_hash = hash(question) % 1000000
        assistant_rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                    callback_data=f"rate_assistant_ai_helpful:{question_hash}"
                ),
                InlineKeyboardButton(
                    text="üëé –ù–µ —Ç–æ",
                    callback_data=f"rate_assistant_ai_unhelpful:{question_hash}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        max_length = 4000
        prefix_text = "ü§ñ <b>–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>\n\n"
        
        if len(answer) <= max_length:
            await message.answer(f"{prefix_text}{answer}", parse_mode="HTML", reply_markup=assistant_rating_keyboard)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
            for i, part in enumerate(parts):
                prefix = prefix_text if i == 0 else ""
                # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                keyboard = assistant_rating_keyboard if i == len(parts) - 1 else None
                await message.answer(f"{prefix}{part}", parse_mode="HTML", reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        await state.update_data(
            last_assistant_question=question,
            last_assistant_answer=answer,
            question_hash=question_hash
        )
        
        logger.info(
            f"–í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ Assistant: user_id={db_user.id}, "
            f"time={response_time:.2f}s, tokens={response.get('tokens_used')}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Assistant: {e}", exc_info=True)
        await processing_msg.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–±–µ–∑ '?' –≤ –Ω–∞—á–∞–ª–µ)."
        )
    
    await state.clear()


@router.message(Command("reset_thread"))
async def cmd_reset_thread(message: Message, db_user: User):
    """
    –°–±—Ä–æ—Å–∏—Ç—å thread –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥)
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    if db_user.assistant_thread_id:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π thread
        try:
            client = await get_assistant_client()
            await client.delete_thread(db_user.assistant_thread_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å thread: {e}")
        
        # –£–¥–∞–ª—è–µ–º thread_id –∏–∑ –ë–î
        async with get_session() as session:
            await set_user_thread_id(session, db_user.id, None)
        
        await message.answer(
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º —Å–±—Ä–æ—à–µ–Ω–∞.\n"
            "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞—á–Ω–µ—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥."
        )
    else:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.")


@router.message(Command("assistant_info"))
async def cmd_assistant_info(message: Message, db_user: User):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    try:
        client = await get_assistant_client()
        info = await client.get_assistant_info()
        
        info_text = f"""
ü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ</b>

<b>ID:</b> <code>{info['id']}</code>
<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {info['name']}
<b>–ú–æ–¥–µ–ª—å:</b> {info['model']}
<b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b> {', '.join(info['tools'])}

<b>–í–∞—à Thread ID:</b> <code>{db_user.assistant_thread_id or '–ù–µ —Å–æ–∑–¥–∞–Ω'}</code>

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ –≤–æ–ø—Ä–æ—Å —Å —Å–∏–º–≤–æ–ª–∞ <code>?</code> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>? –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∞–∂–∏ –Ω—É–∂–Ω—ã –≤ –î–û–£?</code>)
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ask_assistant
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –≤–∞—à–µ–º thread
‚Ä¢ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥: /reset_thread
        """
        
        await message.answer(info_text, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ: {e}")
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–µ. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω."
        )


@router.callback_query(F.data.startswith("expand_assistant:"))
async def process_expand_assistant_answer(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    allowed, error_message = rate_limiter.check_rate_limit(db_user.id, "expand_answer")
    
    if not allowed:
        await callback.message.answer(error_message, parse_mode="HTML")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    rate_limiter.record_request(db_user.id, "expand_answer")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    question_for_ai = data.get('question_for_ai', question)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    faq_context_data = data.get('faq_context')
    
    if not question or not faq_context_data:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await callback.message.answer("ü§ñ –ì–æ—Ç–æ–≤–ª—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        faq_context = f"""
–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
–í–æ–ø—Ä–æ—Å: {faq_context_data['question']}
–û—Ç–≤–µ—Ç: {faq_context_data['answer']}
–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞: {faq_context_data['legal_reference']}
–°—Å—ã–ª–∫–∞: {faq_context_data['legal_url']}
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        client = await get_assistant_client()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è thread
        thread_id = db_user.assistant_thread_id
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ FAQ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        enhanced_question = f"""{faq_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_for_ai}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏ –∏ —Ä–∞—Å—à–∏—Ä—å –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è."""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        response = await client.ask_assistant(
            question=enhanced_question,
            thread_id=thread_id
        )
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = time.time() - start_time
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
        if not thread_id:
            async with get_session() as session:
                await set_user_thread_id(session, db_user.id, response["thread_id"])
        
        answer = response["content"]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await create_message(session, db_user.id, "user", question)
            await create_message(session, db_user.id, "assistant", answer)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            await increment_user_requests(session, db_user.id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await create_query(
                session,
                user_id=db_user.id,
                question=question,
                answer=answer,
                ai_provider=AIProvider.OPENAI,
                ai_model=response["model"],
                response_time=response_time,
                tokens_used=response.get("tokens_used"),
                category="assistant_expand"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="assistant_expand_answer",
                details={
                    "assistant_id": response["assistant_id"],
                    "thread_id": response["thread_id"],
                    "response_time": response_time,
                    "tokens": response.get("tokens_used")
                }
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        question_hash = hash(question_for_ai) % 1000000
        assistant_rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                    callback_data=f"rate_assistant_ai_helpful:{question_hash}"
                ),
                InlineKeyboardButton(
                    text="üëé –ù–µ —Ç–æ",
                    callback_data=f"rate_assistant_ai_unhelpful:{question_hash}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        max_length = 4000
        prefix_text = "ü§ñ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>\n\n"
        
        if len(answer) <= max_length - len(prefix_text):
            await callback.message.answer(f"{prefix_text}{answer}", parse_mode="HTML", reply_markup=assistant_rating_keyboard)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
            for i, part in enumerate(parts):
                prefix = prefix_text if i == 0 else ""
                # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                keyboard = assistant_rating_keyboard if i == len(parts) - 1 else None
                await callback.message.answer(f"{prefix}{part}", parse_mode="HTML", reply_markup=keyboard)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        await callback.message.answer("‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π + –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç</b>", parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        await state.update_data(
            last_assistant_question=question,
            last_assistant_answer=answer,
            question_hash=question_hash
        )
        
        logger.info(
            f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: user_id={db_user.id}, "
            f"time={response_time:.2f}s"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {e}", exc_info=True)
        await processing_msg.delete()
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.callback_query(F.data.startswith("rate_assistant_helpful:"))
async def process_rate_assistant_helpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ FAQ (—Ä–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    faq_context = data.get('faq_context')
    
    if question and faq_context:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="faq_rated_helpful_assistant",
                details={
                    "user_question": question,
                    "faq_question": faq_context['question'],
                    "similarity_score": faq_context.get('similarity_score', 0),
                    "rating": "helpful"
                }
            )
        
        logger.info(
            f"FAQ –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ (–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç): user_id={db_user.id}, "
            f"similarity={faq_context.get('similarity_score', 0):.2%}, "
            f"faq_q='{faq_context['question'][:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            question_hash = data.get('question_hash')
            if question_hash:
                new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞",
                        callback_data=f"expand_assistant:{db_user.id}:{question_hash}"
                    )]
                ])
                await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")


@router.callback_query(F.data.startswith("rate_assistant_unhelpful:"))
async def process_rate_assistant_unhelpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ FAQ (—Ä–µ–∂–∏–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞)
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –û–±—Ä–∞—â–∞—é—Å—å –∫ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    question_for_ai = data.get('question_for_ai', question)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    faq_context = data.get('faq_context')
    
    if question and faq_context:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="faq_rated_unhelpful_assistant",
                details={
                    "user_question": question,
                    "faq_question": faq_context['question'],
                    "similarity_score": faq_context.get('similarity_score', 0),
                    "rating": "unhelpful"
                }
            )
        
        logger.warning(
            f"FAQ –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ (–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç): user_id={db_user.id}, "
            f"similarity={faq_context.get('similarity_score', 0):.2%}, "
            f"user_q='{question}', faq_q='{faq_context['question'][:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        processing_msg = await callback.message.answer("ü§ñ –û–±—Ä–∞—â–∞—é—Å—å –∫ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            client = await get_assistant_client()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è thread
            thread_id = db_user.assistant_thread_id
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
            response = await client.ask_assistant(
                question=question_for_ai,
                thread_id=thread_id
            )
            
            # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
            if not thread_id:
                async with get_session() as session:
                    await set_user_thread_id(session, db_user.id, response["thread_id"])
            
            answer = response["content"]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            async with get_session() as session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                await create_message(session, db_user.id, "user", question)
                await create_message(session, db_user.id, "assistant", answer)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                await increment_user_requests(session, db_user.id)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await create_query(
                    session,
                    user_id=db_user.id,
                    question=question,
                    answer=answer,
                    ai_provider=AIProvider.OPENAI,
                    ai_model=response["model"],
                    response_time=response_time,
                    tokens_used=response.get("tokens_used"),
                    category="assistant_after_negative"
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
                await create_audit_log(
                    session,
                    user_id=db_user.id,
                    action="assistant_after_negative_rating",
                    details={
                        "assistant_id": response["assistant_id"],
                        "thread_id": response["thread_id"],
                        "response_time": response_time,
                        "tokens": response.get("tokens_used")
                    }
                )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            max_length = 4000
            prefix_text = "ü§ñ <b>–û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞:</b>\n\n"
            
            if len(answer) <= max_length:
                await callback.message.answer(f"{prefix_text}{answer}", parse_mode="HTML")
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
                for i, part in enumerate(parts):
                    prefix = prefix_text if i == 0 else ""
                    await callback.message.answer(f"{prefix}{part}", parse_mode="HTML")
            
            logger.info(
                f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: user_id={db_user.id}, "
                f"time={response_time:.2f}s"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {e}", exc_info=True)
            await processing_msg.delete()
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )


@router.callback_query(F.data.startswith("rate_assistant_ai_helpful:"))
async def process_rate_assistant_ai_helpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_assistant_question')
    answer = data.get('last_assistant_answer')
    
    if question and answer:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="assistant_ai_rated_helpful",
                details={
                    "question": question[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    "answer_length": len(answer),
                    "rating": "helpful"
                }
            )
        
        logger.info(
            f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ü–µ–Ω—ë–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"question='{question[:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")


@router.callback_query(F.data.startswith("rate_assistant_ai_unhelpful:"))
async def process_rate_assistant_ai_unhelpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_assistant_question')
    answer = data.get('last_assistant_answer')
    
    if question and answer:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="assistant_ai_rated_unhelpful",
                details={
                    "question": question[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    "answer_length": len(answer),
                    "rating": "unhelpful"
                }
            )
        
        logger.warning(
            f"–û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –æ—Ü–µ–Ω—ë–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"question='{question[:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ /reset_thread\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ /help"
        )
    
    # –û—á–∏—â–∞–µ–º state
    await state.clear()

