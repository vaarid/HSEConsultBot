"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import time
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from bot.states.conversation import ConversationStates
from database.db import get_session
from database.crud import (
    create_message, get_user_messages, increment_user_requests,
    create_query, create_audit_log
)
from database.models import User, AIProvider
from ai.factory import AIClientFactory
from ai.prompts import get_system_prompt, CATEGORIZATION_PROMPT
from services.knowledge_base import get_knowledge_base
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()
router = Router()


@router.message(Command("ask"))
async def cmd_ask(message: Message, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ask
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await message.answer(
        "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞.\n\n"
        "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –†–§."
    )
    await state.set_state(ConversationStates.waiting_for_question)


@router.message(ConversationStates.waiting_for_question)
@router.message(lambda message: message.text and not message.text.startswith('/'))
async def process_question(message: Message, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    allowed, error_message = rate_limiter.check_rate_limit(db_user.id, "question")
    
    if not allowed:
        await message.answer(error_message, parse_mode="HTML")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    rate_limiter.record_request(db_user.id, "question")
    
    question = message.text
    
    if not question or len(question) < 5:
        await message.answer("‚ùå –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ–º
    from utils.privacy import anonymize_personal_data, should_warn_about_personal_data, get_privacy_warning
    
    anonymized_question, has_personal_data = anonymize_personal_data(question, log_detection=True)
    
    # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ü–î, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if has_personal_data:
        await message.answer(get_privacy_warning(), parse_mode="HTML")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {db_user.id} —É–∫–∞–∑–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–æ–ø—Ä–æ—Å–µ. –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è.")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    question_for_processing = anonymized_question if has_personal_data else question
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await message.answer("üîç –ò—â—É –æ—Ç–≤–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
    
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –≤ FAQ
        async with get_session() as session:
            history = await get_user_messages(session, db_user.id, limit=3)
        
        # 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ FAQ
        context_query = question
        if history:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            recent_context = []
            for msg in history[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                if msg.role == "user":
                    recent_context.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {msg.content}")
                elif msg.role == "assistant":
                    # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    answer_preview = msg.content[:100] + "..." if len(msg.content) > 100 else msg.content
                    recent_context.append(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç: {answer_preview}")
            
            if recent_context:
                context_query = f"{' '.join(recent_context)} –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: {question}"
                logger.debug(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è FAQ: {context_query}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π FAQ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        kb = get_knowledge_base()
        faq_answer = await kb.get_answer_with_validation(context_query, check_urls=True)
        
        if faq_answer and faq_answer['similarity_score'] >= 0.5:
            # –ù–∞—à–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ FAQ
            logger.info(f"–ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ FAQ: {faq_answer['question']} ({faq_answer['similarity_score']:.2%})")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ FAQ
            faq_formatted = kb.format_answer_for_user(faq_answer)
            
            # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫–∏
            question_hash = hash(question) % 1000000
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI",
                    callback_data=f"expand_answer:{db_user.id}:{question_hash}"
                )],
                [
                    InlineKeyboardButton(
                        text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                        callback_data=f"rate_helpful:{question_hash}"
                    ),
                    InlineKeyboardButton(
                        text="üëé –ù–µ —Ç–æ",
                        callback_data=f"rate_unhelpful:{question_hash}"
                    )
                ]
            ])
            
            await message.answer(faq_formatted, parse_mode="HTML", reply_markup=keyboard)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await processing_msg.delete()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç FAQ –≤ state –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            await state.update_data(
                last_question=question,
                question_for_ai=question_for_processing,  # –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è AI
                question_hash=question_hash,
                faq_context={
                    'question': faq_answer['question'],
                    'answer': faq_answer['answer'],
                    'legal_reference': faq_answer['legal_reference'],
                    'legal_url': faq_answer['legal_url'],
                    'similarity_score': faq_answer['similarity_score']
                }
            )
            
            logger.info(f"–û—Ç–≤–µ—Ç –∏–∑ FAQ –ø–æ–∫–∞–∑–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            return
        else:
            # –û—Ç–≤–µ—Ç –≤ FAQ –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å—Ä–∞–∑—É –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ AI
            await processing_msg.edit_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ AI...")
        
        # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # 5. –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–ª–∏–µ–Ω—Ç–∞
        ai_client = AIClientFactory.create_client(config)
        
        # 6. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with get_session() as session:
            history = await get_user_messages(session, db_user.id, limit=config.app.max_history_length)
        
        # 7. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI
        messages = [
            {"role": "system", "content": get_system_prompt(db_user.role.value)}
        ]
        
        # 8. –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        for hist_msg in history:
            messages.append({
                "role": hist_msg.role,
                "content": hist_msg.content
            })
        
        # 9. –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        messages.append({
            "role": "user",
            "content": question_for_processing
        })
        
        # 10. –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # 11. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
        response = await ai_client.chat_completion(messages)
        
        # 12. –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = time.time() - start_time
        
        answer = response["content"]
        
        # 13. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await create_message(session, db_user.id, "user", question)
            await create_message(session, db_user.id, "assistant", answer)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            await increment_user_requests(session, db_user.id)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            category = None
            try:
                cat_response = await ai_client.chat_completion(
                    [{"role": "user", "content": CATEGORIZATION_PROMPT.format(question=question)}],
                    max_tokens=10
                )
                category = cat_response["content"].strip().lower()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await create_query(
                session,
                user_id=db_user.id,
                question=question,
                answer=answer,
                ai_provider=AIProvider(config.app.ai_provider),
                ai_model=response["model"],
                response_time=response_time,
                tokens_used=response.get("tokens_used"),
                category=category
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="question_asked",
                details={
                    "category": category,
                    "response_time": response_time,
                    "tokens": response.get("tokens_used")
                }
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ AI –æ—Ç–≤–µ—Ç–∞
        question_hash = hash(question) % 1000000
        ai_rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                    callback_data=f"rate_ai_helpful:{question_hash}"
                ),
                InlineKeyboardButton(
                    text="üëé –ù–µ —Ç–æ",
                    callback_data=f"rate_ai_unhelpful:{question_hash}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ (Telegram –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        max_length = 4000
        
        if len(answer) <= max_length:
            await message.answer(answer, parse_mode="Markdown", reply_markup=ai_rating_keyboard)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
            for i, part in enumerate(parts):
                # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                keyboard = ai_rating_keyboard if i == len(parts) - 1 else None
                await message.answer(part, parse_mode="Markdown", reply_markup=keyboard)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        await state.update_data(
            last_ai_question=question,
            last_ai_answer=answer,
            question_hash=question_hash
        )
        
        logger.info(
            f"–í–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω: user_id={db_user.id}, "
            f"category={category}, time={response_time:.2f}s"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        await processing_msg.delete()
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    
    await state.clear()


@router.callback_query(F.data.startswith("expand_answer:"))
async def process_expand_answer(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    from utils.rate_limiter import get_rate_limiter
    
    rate_limiter = get_rate_limiter()
    allowed, error_message = rate_limiter.check_rate_limit(db_user.id, "expand_answer")
    
    if not allowed:
        await callback.message.answer(error_message, parse_mode="HTML")
        return
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    rate_limiter.record_request(db_user.id, "expand_answer")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    question_for_ai = data.get('question_for_ai', question)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    faq_context_data = data.get('faq_context')
    
    if not question or not faq_context_data:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = await callback.message.answer("ü§ñ –ì–æ—Ç–æ–≤–ª—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
        faq_context = f"""
–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:
–í–æ–ø—Ä–æ—Å: {faq_context_data['question']}
–û—Ç–≤–µ—Ç: {faq_context_data['answer']}
–ü—Ä–∞–≤–æ–≤–∞—è –±–∞–∑–∞: {faq_context_data['legal_reference']}
–°—Å—ã–ª–∫–∞: {faq_context_data['legal_url']}
"""
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config = load_config()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–ª–∏–µ–Ω—Ç–∞
        ai_client = AIClientFactory.create_client(config)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        async with get_session() as session:
            history = await get_user_messages(session, db_user.id, limit=config.app.max_history_length)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI
        messages = [
            {"role": "system", "content": get_system_prompt(db_user.role.value)}
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        for hist_msg in history:
            messages.append({
                "role": hist_msg.role,
                "content": hist_msg.content
            })
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ FAQ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
        enhanced_question = f"""{faq_context}

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {question_for_ai}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–ø–æ–ª–Ω–∏ –∏ —Ä–∞—Å—à–∏—Ä—å –æ—Ç–≤–µ—Ç –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏—è."""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        messages.append({
            "role": "user",
            "content": enhanced_question
        })
        
        # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
        start_time = time.time()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
        response = await ai_client.chat_completion(messages)
        
        # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        response_time = time.time() - start_time
        
        answer = response["content"]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_session() as session:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            await create_message(session, db_user.id, "user", question)
            await create_message(session, db_user.id, "assistant", answer)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
            await increment_user_requests(session, db_user.id)
            
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
            category = None
            try:
                cat_response = await ai_client.chat_completion(
                    [{"role": "user", "content": CATEGORIZATION_PROMPT.format(question=question)}],
                    max_tokens=10
                )
                category = cat_response["content"].strip().lower()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {e}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            await create_query(
                session,
                user_id=db_user.id,
                question=question,
                answer=answer,
                ai_provider=AIProvider(config.app.ai_provider),
                ai_model=response["model"],
                response_time=response_time,
                tokens_used=response.get("tokens_used"),
                category=category
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="expand_answer_requested",
                details={
                    "question": question,
                    "model": response["model"],
                    "category": category,
                    "response_time": response_time,
                    "tokens": response.get("tokens_used")
                }
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ AI –æ—Ç–≤–µ—Ç–∞
        question_hash = hash(question) % 1000000
        ai_rating_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üëç –ü–æ–ª–µ–∑–Ω–æ",
                    callback_data=f"rate_ai_helpful:{question_hash}"
                ),
                InlineKeyboardButton(
                    text="üëé –ù–µ —Ç–æ",
                    callback_data=f"rate_ai_unhelpful:{question_hash}"
                )
            ]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        max_length = 4000
        prefix_text = "ü§ñ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI:\n\n"
        
        if len(answer) <= max_length - len(prefix_text):
            await callback.message.answer(f"{prefix_text}{answer}", parse_mode="Markdown", reply_markup=ai_rating_keyboard)
        else:
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
            for i, part in enumerate(parts):
                prefix = prefix_text if i == 0 else ""
                # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                keyboard = ai_rating_keyboard if i == len(parts) - 1 else None
                await callback.message.answer(f"{prefix}{part}", parse_mode="Markdown", reply_markup=keyboard)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        await callback.message.answer("‚úÖ <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–∞–∑–∞ –∑–Ω–∞–Ω–∏–π + AI</b>", parse_mode="HTML")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏
        await state.update_data(
            last_ai_question=question,
            last_ai_answer=answer,
            question_hash=question_hash
        )
        
        logger.info(
            f"–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: user_id={db_user.id}, "
            f"category={category}, time={response_time:.2f}s"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
        await processing_msg.delete()
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


@router.callback_query(F.data.startswith("rate_helpful:"))
async def process_rate_helpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ FAQ
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    faq_context = data.get('faq_context')
    
    if question and faq_context:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="faq_rated_helpful",
                details={
                    "user_question": question,
                    "faq_question": faq_context['question'],
                    "similarity_score": faq_context.get('similarity_score', 0),
                    "rating": "helpful"
                }
            )
        
        logger.info(
            f"FAQ –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"similarity={faq_context.get('similarity_score', 0):.2%}, "
            f"faq_q='{faq_context['question'][:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏
        try:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            question_hash = data.get('question_hash')
            if question_hash:
                new_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="ü§ñ –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI",
                        callback_data=f"expand_answer:{db_user.id}:{question_hash}"
                    )]
                ])
                await callback.message.edit_reply_markup(reply_markup=new_keyboard)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")


@router.callback_query(F.data.startswith("rate_unhelpful:"))
async def process_rate_unhelpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ FAQ
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ü–æ–ø—Ä–æ–±—É—é –Ω–∞–π—Ç–∏ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç.")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_question')
    question_for_ai = data.get('question_for_ai', question)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
    faq_context = data.get('faq_context')
    
    if question and faq_context:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="faq_rated_unhelpful",
                details={
                    "user_question": question,
                    "faq_question": faq_context['question'],
                    "similarity_score": faq_context.get('similarity_score', 0),
                    "rating": "unhelpful"
                }
            )
        
        logger.warning(
            f"FAQ –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"similarity={faq_context.get('similarity_score', 0):.2%}, "
            f"user_q='{question}', faq_q='{faq_context['question'][:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ–º AI –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await callback.message.answer("ü§ñ –û–±—Ä–∞—â–∞—é—Å—å –∫ AI –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = load_config()
            
            # –°–æ–∑–¥–∞–Ω–∏–µ AI –∫–ª–∏–µ–Ω—Ç–∞
            ai_client = AIClientFactory.create_client(config)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            async with get_session() as session:
                history = await get_user_messages(session, db_user.id, limit=config.app.max_history_length)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI
            messages = [
                {"role": "system", "content": get_system_prompt(db_user.role.value)}
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for hist_msg in history:
                messages.append({
                    "role": hist_msg.role,
                    "content": hist_msg.content
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é)
            messages.append({
                "role": "user",
                "content": question_for_ai
            })
            
            # –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è
            start_time = time.time()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI
            response = await ai_client.chat_completion(messages)
            
            # –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            response_time = time.time() - start_time
            
            answer = response["content"]
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            async with get_session() as session:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                await create_message(session, db_user.id, "user", question)
                await create_message(session, db_user.id, "assistant", answer)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
                await increment_user_requests(session, db_user.id)
                
                # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–∞
                category = None
                try:
                    cat_response = await ai_client.chat_completion(
                        [{"role": "user", "content": CATEGORIZATION_PROMPT.format(question=question)}],
                        max_tokens=10
                    )
                    category = cat_response["content"].strip().lower()
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                await create_query(
                    session,
                    user_id=db_user.id,
                    question=question,
                    answer=answer,
                    ai_provider=AIProvider(config.app.ai_provider),
                    ai_model=response["model"],
                    response_time=response_time,
                    tokens_used=response.get("tokens_used"),
                    category=category
                )
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ –∞—É–¥–∏—Ç
                await create_audit_log(
                    session,
                    user_id=db_user.id,
                    action="ai_after_negative_rating",
                    details={
                        "question": question,
                        "model": response["model"],
                        "category": category,
                        "response_time": response_time,
                        "tokens": response.get("tokens_used")
                    }
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            max_length = 4000
            
            if len(answer) <= max_length:
                await callback.message.answer(answer, parse_mode="Markdown")
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = [answer[i:i+max_length] for i in range(0, len(answer), max_length)]
                for part in parts:
                    await callback.message.answer(part, parse_mode="Markdown")
            
            logger.info(
                f"AI –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: user_id={db_user.id}, "
                f"category={category}, time={response_time:.2f}s"
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ AI –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏: {e}", exc_info=True)
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ."
            )


@router.callback_query(F.data.startswith("rate_ai_helpful:"))
async def process_rate_ai_helpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ AI –æ—Ç–≤–µ—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_ai_question')
    answer = data.get('last_ai_answer')
    
    if question and answer:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="ai_rated_helpful",
                details={
                    "question": question[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    "answer_length": len(answer),
                    "rating": "helpful"
                }
            )
        
        logger.info(
            f"AI –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"question='{question[:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")


@router.callback_query(F.data.startswith("rate_ai_unhelpful:"))
async def process_rate_ai_unhelpful(callback: CallbackQuery, state: FSMContext, db_user: User):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ AI –æ—Ç–≤–µ—Ç–∞
    
    Args:
        callback: Callback –∑–∞–ø—Ä–æ—Å
        state: FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_user: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –ë–î
    """
    await callback.answer("üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    data = await state.get_data()
    question = data.get('last_ai_question')
    answer = data.get('last_ai_answer')
    
    if question and answer:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
        async with get_session() as session:
            await create_audit_log(
                session,
                user_id=db_user.id,
                action="ai_rated_unhelpful",
                details={
                    "question": question[:100],  # –ü–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
                    "answer_length": len(answer),
                    "rating": "unhelpful"
                }
            )
        
        logger.warning(
            f"AI –æ—Ç–≤–µ—Ç –æ—Ü–µ–Ω—ë–Ω –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ: user_id={db_user.id}, "
            f"question='{question[:50]}...'"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        try:
            await callback.message.edit_reply_markup(reply_markup=None)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏: {e}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await callback.message.answer(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥—Ä—É–≥–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\n"
            "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ /help"
        )
    
    # –û—á–∏—â–∞–µ–º state
    await state.clear()

