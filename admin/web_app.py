"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (FastAPI)
"""
from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.responses import HTMLResponse
from typing import List, Dict
import secrets

from database.db import get_session, init_db
from database.crud import (
    get_all_users, get_queries_stats, get_popular_categories,
    get_all_settings, set_setting, get_user_queries
)
from utils.analytics import anonymize_queries_list, create_analytics_report
from utils.config import load_config
from utils.logger import setup_logger

logger = setup_logger()

app = FastAPI(
    title="OT Bot Admin Panel",
    description="–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ—Ç–∞ –ø–æ –æ—Ö—Ä–∞–Ω–µ —Ç—Ä—É–¥–∞",
    version="1.0.0"
)

security = HTTPBasic()


def verify_admin(credentials: HTTPBasicCredentials = Depends(security)):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        credentials: HTTP Basic credentials
        
    Raises:
        HTTPException: –ï—Å–ª–∏ credentials –Ω–µ–≤–µ—Ä–Ω—ã–µ
    """
    config = load_config()
    correct_username = "admin"
    correct_password = config.admin.secret_key[:20]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å secret key –∫–∞–∫ –ø–∞—Ä–æ–ª—å
    
    is_correct_username = secrets.compare_digest(credentials.username.encode("utf8"), correct_username.encode("utf8"))
    is_correct_password = secrets.compare_digest(credentials.password.encode("utf8"), correct_password.encode("utf8"))
    
    if not (is_correct_username and is_correct_password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
            headers={"WWW-Authenticate": "Basic"},
        )
    
    return credentials.username


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    await init_db()
    logger.info("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω–∞")


@app.get("/", response_class=HTMLResponse)
async def root(username: str = Depends(verify_admin)):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ verify_admin)
        
    Returns:
        HTMLResponse: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    html_content = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å OT Bot</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            h1 { color: #333; }
            .card {
                background: white;
                padding: 20px;
                margin: 20px 0;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .nav {
                background: #2c3e50;
                padding: 15px;
                border-radius: 8px;
                margin-bottom: 20px;
            }
            .nav a {
                color: white;
                text-decoration: none;
                margin: 0 15px;
                padding: 8px 15px;
                border-radius: 4px;
            }
            .nav a:hover {
                background: #34495e;
            }
        </style>
    </head>
    <body>
        <h1>üõ°Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å OT Bot</h1>
        
        <div class="nav">
            <a href="/stats">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</a>
            <a href="/analytics">üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞</a>
            <a href="/users">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</a>
            <a href="/settings">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</a>
            <a href="/docs">üìñ API Docs</a>
        </div>
        
        <div class="card">
            <h2>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!</h2>
            <p>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤—ã—à–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.</p>
            <p><strong>API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:</strong> <a href="/docs">/docs</a></p>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/api/stats")
async def get_stats(username: str = Depends(verify_admin)) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    """
    async with get_session() as session:
        users = await get_all_users(session)
        stats = await get_queries_stats(session)
        categories = await get_popular_categories(session, limit=10)
    
    return {
        "total_users": len(users),
        "total_queries": stats["total_queries"],
        "avg_response_time": stats["avg_response_time"],
        "popular_categories": [{"category": cat, "count": cnt} for cat, cnt in categories]
    }


@app.get("/stats", response_class=HTMLResponse)
async def stats_page(username: str = Depends(verify_admin)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        HTMLResponse: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    async with get_session() as session:
        users = await get_all_users(session)
        stats = await get_queries_stats(session)
        categories = await get_popular_categories(session, limit=10)
    
    categories_html = ""
    for cat, cnt in categories:
        categories_html += f"<tr><td>{cat}</td><td>{cnt}</td></tr>"
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - OT Bot</title>
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }}
            .card {{ background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
            table {{ width: 100%; border-collapse: collapse; }}
            th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}
            th {{ background: #f8f9fa; }}
            .stat-box {{ display: inline-block; padding: 20px; margin: 10px; background: #e3f2fd; border-radius: 8px; }}
        </style>
    </head>
    <body>
        <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</h1>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        
        <div class="card">
            <h2>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
            <div class="stat-box">
                <h3>üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <p style="font-size: 2em; margin: 0;">{len(users)}</p>
            </div>
            <div class="stat-box">
                <h3>‚ùì –ó–∞–ø—Ä–æ—Å–æ–≤</h3>
                <p style="font-size: 2em; margin: 0;">{stats['total_queries']}</p>
            </div>
            <div class="stat-box">
                <h3>‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</h3>
                <p style="font-size: 2em; margin: 0;">{stats['avg_response_time']} —Å–µ–∫</p>
            </div>
        </div>
        
        <div class="card">
            <h2>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h2>
            <table>
                <thead>
                    <tr>
                        <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                        <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                    </tr>
                </thead>
                <tbody>
                    {categories_html}
                </tbody>
            </table>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/api/users")
async def get_users_api(username: str = Depends(verify_admin)) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    async with get_session() as session:
        users = await get_all_users(session)
    
    return [
        {
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "role": user.role.value,
            "is_active": user.is_active,
            "total_requests": user.total_requests,
            "created_at": user.created_at.isoformat()
        }
        for user in users
    ]


@app.get("/api/queries")
async def get_queries_api(
    username: str = Depends(verify_admin),
    limit: int = 50,
    user_id: int = None
) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limit: –õ–∏–º–∏—Ç –∑–∞–ø–∏—Å–µ–π
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    async with get_session() as session:
        if user_id:
            queries = await get_user_queries(session, user_id, limit)
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã (–Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ CRUD)
            from sqlalchemy import select, desc
            from database.models import Query
            result = await session.execute(
                select(Query)
                .order_by(desc(Query.created_at))
                .limit(limit)
            )
            queries = list(result.scalars().all())
    
    return [
        {
            "id": query.id,
            "user_id": query.user_id,
            "question": query.question[:100] + "..." if len(query.question) > 100 else query.question,
            "answer": query.answer[:200] + "..." if len(query.answer) > 200 else query.answer,
            "ai_provider": query.ai_provider.value,
            "ai_model": query.ai_model,
            "response_time": query.response_time,
            "tokens_used": query.tokens_used,
            "category": query.category,
            "created_at": query.created_at.isoformat()
        }
        for query in queries
    ]


@app.get("/api/analytics/detailed")
async def get_detailed_analytics(username: str = Depends(verify_admin)) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict: –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    """
    from sqlalchemy import select, func, desc
    from database.models import Query, User, AIProvider
    from datetime import datetime, timedelta
    
    async with get_session() as session:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_queries_result = await session.execute(select(func.count(Query.id)))
        total_queries = total_queries_result.scalar()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        ai_stats_result = await session.execute(
            select(Query.ai_provider, func.count(Query.id).label('count'))
            .group_by(Query.ai_provider)
        )
        ai_stats = {provider.value: count for provider, count in ai_stats_result.all()}
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        avg_time_result = await session.execute(select(func.avg(Query.response_time)))
        avg_response_time = avg_time_result.scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω–∞–º
        total_tokens_result = await session.execute(select(func.sum(Query.tokens_used)))
        total_tokens = total_tokens_result.scalar() or 0
        
        # –ó–∞–ø—Ä–æ—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)
        week_queries_result = await session.execute(
            select(func.count(Query.id))
            .where(Query.created_at >= week_ago)
        )
        week_queries = week_queries_result.scalar()
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–ø—Ä–æ—Å–æ–≤
        top_users_result = await session.execute(
            select(User.id, User.username, User.total_requests)
            .order_by(desc(User.total_requests))
            .limit(10)
        )
        top_users = [
            {"id": user_id, "username": username, "requests": requests}
            for user_id, username, requests in top_users_result.all()
        ]
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories_result = await session.execute(
            select(Query.category, func.count(Query.id).label('count'))
            .where(Query.category.isnot(None))
            .group_by(Query.category)
            .order_by(desc('count'))
            .limit(10)
        )
        categories = [{"category": cat, "count": cnt} for cat, cnt in categories_result.all()]
        
        return {
            "total_queries": total_queries,
            "week_queries": week_queries,
            "avg_response_time": round(avg_response_time, 2),
            "total_tokens": total_tokens,
            "ai_providers": ai_stats,
            "top_users": top_users,
            "categories": categories
        }


@app.get("/analytics", response_class=HTMLResponse)
async def analytics_page(username: str = Depends(verify_admin)):
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        HTMLResponse: HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    async with get_session() as session:
        analytics = await get_detailed_analytics(username)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users_html = ""
    for user in analytics["top_users"][:5]:
        username_display = user["username"] or f"ID: {user['id']}"
        top_users_html += f"<tr><td>{username_display}</td><td>{user['requests']}</td></tr>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories_html = ""
    for cat in analytics["categories"]:
        categories_html += f"<tr><td>{cat['category']}</td><td>{cat['count']}</td></tr>"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    ai_providers_html = ""
    for provider, count in analytics["ai_providers"].items():
        ai_providers_html += f"<tr><td>{provider}</td><td>{count}</td></tr>"
    
    html_content = f"""
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <title>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ - OT Bot</title>
        <style>
            body {{ font-family: Arial, sans-serif; max-width: 1400px; margin: 0 auto; padding: 20px; }}
            .card {{ background: white; padding: 20px; margin: 20px 0; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
            table {{ width: 100%; border-collapse: collapse; }}
            th, td {{ padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }}
            th {{ background: #f8f9fa; }}
            .stat-box {{ display: inline-block; padding: 20px; margin: 10px; background: #e3f2fd; border-radius: 8px; min-width: 150px; }}
            .grid {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }}
        </style>
    </head>
    <body>
        <h1>üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</h1>
        <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
        
        <div class="card">
            <h2>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏</h2>
            <div class="stat-box">
                <h3>üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤</h3>
                <p style="font-size: 2em; margin: 0;">{analytics['total_queries']}</p>
            </div>
            <div class="stat-box">
                <h3>üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é</h3>
                <p style="font-size: 2em; margin: 0;">{analytics['week_queries']}</p>
            </div>
            <div class="stat-box">
                <h3>‚è± –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è</h3>
                <p style="font-size: 2em; margin: 0;">{analytics['avg_response_time']} —Å–µ–∫</p>
            </div>
            <div class="stat-box">
                <h3>üî§ –¢–æ–∫–µ–Ω–æ–≤</h3>
                <p style="font-size: 2em; margin: 0;">{analytics['total_tokens']:,}</p>
            </div>
        </div>
        
        <div class="grid">
            <div class="card">
                <h3>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h3>
                <table>
                    <thead>
                        <tr><th>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th><th>–ó–∞–ø—Ä–æ—Å–æ–≤</th></tr>
                    </thead>
                    <tbody>
                        {top_users_html}
                    </tbody>
                </table>
            </div>
            
            <div class="card">
                <h3>AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã</h3>
                <table>
                    <thead>
                        <tr><th>–ü—Ä–æ–≤–∞–π–¥–µ—Ä</th><th>–ó–∞–ø—Ä–æ—Å–æ–≤</th></tr>
                    </thead>
                    <tbody>
                        {ai_providers_html}
                    </tbody>
                </table>
            </div>
        </div>
        
        <div class="card">
            <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h3>
            <table>
                <thead>
                    <tr><th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th><th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th></tr>
                </thead>
                <tbody>
                    {categories_html}
                </tbody>
            </table>
        </div>
    </body>
    </html>
    """
    return HTMLResponse(content=html_content)


@app.get("/api/analytics/anonymized")
async def get_anonymized_analytics(username: str = Depends(verify_admin)) -> Dict:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict: –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
    """
    from sqlalchemy import select, desc
    from database.models import Query
    
    async with get_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã
        result = await session.execute(
            select(Query)
            .order_by(desc(Query.created_at))
            .limit(1000)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        )
        queries = list(result.scalars().all())
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    queries_data = [
        {
            "id": query.id,
            "user_id": query.user_id,
            "question": query.question,
            "answer": query.answer,
            "ai_provider": query.ai_provider.value,
            "ai_model": query.ai_model,
            "response_time": query.response_time,
            "tokens_used": query.tokens_used,
            "category": query.category,
            "created_at": query.created_at.isoformat()
        }
        for query in queries
    ]
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç
    report = create_analytics_report(queries_data, anonymize=True)
    
    return report


@app.get("/api/export/queries")
async def export_queries(
    username: str = Depends(verify_admin),
    format: str = "json",
    anonymize: bool = True
) -> Dict:
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    
    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        format: –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ (json, csv)
        anonymize: –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        
    Returns:
        Dict: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    """
    from sqlalchemy import select, desc
    from database.models import Query
    import csv
    import io
    
    async with get_session() as session:
        result = await session.execute(
            select(Query)
            .order_by(desc(Query.created_at))
            .limit(5000)  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        )
        queries = list(result.scalars().all())
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä–∏
    queries_data = [
        {
            "id": query.id,
            "user_id": query.user_id,
            "question": query.question,
            "answer": query.answer,
            "ai_provider": query.ai_provider.value,
            "ai_model": query.ai_model,
            "response_time": query.response_time,
            "tokens_used": query.tokens_used,
            "category": query.category,
            "created_at": query.created_at.isoformat()
        }
        for query in queries
    ]
    
    if anonymize:
        queries_data = anonymize_queries_list(queries_data)
    
    if format == "csv":
        # –°–æ–∑–¥–∞–µ–º CSV
        output = io.StringIO()
        if queries_data:
            writer = csv.DictWriter(output, fieldnames=queries_data[0].keys())
            writer.writeheader()
            writer.writerows(queries_data)
        
        return {
            "format": "csv",
            "data": output.getvalue(),
            "anonymized": anonymize,
            "count": len(queries_data)
        }
    else:
        return {
            "format": "json",
            "data": queries_data,
            "anonymized": anonymize,
            "count": len(queries_data)
        }


@app.post("/api/settings/{key}")
async def update_setting(key: str, value: str, username: str = Depends(verify_admin)) -> Dict:
    """
    –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    
    Args:
        key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        value: –ó–Ω–∞—á–µ–Ω–∏–µ
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict: –†–µ–∑—É–ª—å—Ç–∞—Ç
    """
    async with get_session() as session:
        await set_setting(session, key, value)
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ {key} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value}")
    return {"status": "success", "key": key, "value": value}


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

