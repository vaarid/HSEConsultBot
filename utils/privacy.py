"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–§–ó-152)
"""

import re
from typing import Optional
from utils.logger import setup_logger

logger = setup_logger()


# –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
PHONE_PATTERN = re.compile(r'(\+7|8)[\s\-]?\(?\d{3}\)?[\s\-]?\d{3}[\s\-]?\d{2}[\s\-]?\d{2}')
EMAIL_PATTERN = re.compile(r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b')
PASSPORT_PATTERN = re.compile(r'\b\d{4}\s?\d{6}\b')  # –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞
SNILS_PATTERN = re.compile(r'\b\d{3}-\d{3}-\d{3}\s?\d{2}\b')  # –°–ù–ò–õ–°
INN_PATTERN = re.compile(r'\b\d{10,12}\b')  # –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)


def anonymize_personal_data(text: str, log_detection: bool = True) -> tuple[str, bool]:
    """
    –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ
    
    Args:
        text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
        log_detection: –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ü–î
        
    Returns:
        tuple[str, bool]: (–ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –ë—ã–ª–∏ –ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ü–î)
    """
    original_text = text
    detected = False
    
    # –ó–∞–º–µ–Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    if PHONE_PATTERN.search(text):
        text = PHONE_PATTERN.sub('[–¢–ï–õ–ï–§–û–ù]', text)
        detected = True
    
    # –ó–∞–º–µ–Ω–∞ email
    if EMAIL_PATTERN.search(text):
        text = EMAIL_PATTERN.sub('[EMAIL]', text)
        detected = True
    
    # –ó–∞–º–µ–Ω–∞ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤
    if PASSPORT_PATTERN.search(text):
        text = PASSPORT_PATTERN.sub('[–ü–ê–°–ü–û–†–¢]', text)
        detected = True
    
    # –ó–∞–º–µ–Ω–∞ –°–ù–ò–õ–°
    if SNILS_PATTERN.search(text):
        text = SNILS_PATTERN.sub('[–°–ù–ò–õ–°]', text)
        detected = True
    
    # –ó–∞–º–µ–Ω–∞ –ò–ù–ù (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥)
    # –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã, —á—Ç–æ–±—ã –Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–∞
    
    if detected and log_detection:
        logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ.")
        logger.debug(f"–î–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {len(original_text)}, –ø–æ—Å–ª–µ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏: {len(text)}")
    
    return text, detected


def should_warn_about_personal_data(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ü–î
    """
    patterns = [
        PHONE_PATTERN,
        EMAIL_PATTERN,
        PASSPORT_PATTERN,
        SNILS_PATTERN
    ]
    
    return any(pattern.search(text) for pattern in patterns)


def get_privacy_warning() -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    Returns:
        str: –¢–µ–∫—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    """
    return """
‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!</b>

–í –≤–∞—à–µ–º –≤–æ–ø—Ä–æ—Å–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, email, –ø–∞—Å–ø–æ—Ä—Ç –∏ —Ç.–¥.).

üîí <b>–î–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
‚Ä¢ –û–Ω–∏ –ù–ï –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ AI-—Å–µ—Ä–≤–∏—Å—ã
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ù–ï —É–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ

–í–∞—à –≤–æ–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π.
"""


def anonymize_user_info_for_logging(user_id: int, username: Optional[str] = None) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    Args:
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username: Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
    Returns:
        str: –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ "user_xxx" –∏–ª–∏ "user_xxx (@username)"
    """
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Ü–∏—Ñ—Ä—ã ID
    masked_id = f"***{str(user_id)[-3:]}"
    
    if username:
        return f"user_{masked_id} (@{username})"
    return f"user_{masked_id}"

